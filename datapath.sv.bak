`timescale 1ns/10ps
module datapath(
	input logic clk, 
	input logic [31:0] instruction,
	input logic Reg2Loc, ALUsrc, MemToReg, RegWrite, MemWrite, BrTaken, UncondBr, shift, direction, math, srcType,
	input logic [2:0] ALUop,
	output logic negative, zero, overflow, carry_out
	);
	
	logic [4:0] Rd, Rn, Rm;
	logic [11:0] Imm12;
	logic [5:0] shamt;
	logic [25:0] Imm26; 
	logic [18:0] Imm19; 
	logic [8:0] Imm9; 

	assign Rd = instruction[4:0];
	assign Rn = instruction[9:5]; 
	assign Rm = instruction[20:16]; 
	
	assign Imm26 = instruction[25:0]; 
	assign Imm19 = instruction[23:5]; 
	
	assign Imm12 = instruction[21:10];
	assign Imm9 = instruction[20:12]; 
	assign shamt = instruction[15:10];
	
	logic [63:0] Da, Db, Dw, tempI, tempALU, result, Dout, tempMem, mult_low, mult_high, shifted, tempMath;
	logic [4:0] Ab;
	
	// creating regfile 
	mux2_1_5 chooseReg (.d0(Rd), .d1(Rm), .select(Reg2Loc), .out(Ab));
	regfile registers (.ReadData1(Da), .ReadData2(Db), .WriteData(Dw), .ReadRegister1(Rn), .ReadRegister2(Ab), .WriteRegister(Rd), .RegWrite, .clk);
	
	// creating mux with srctype for Itypes 
	mux2_1_64 ifItype (.d0({{55{Imm9[8]}}, Imm9}), .d1({52'b0, Imm12}), .select(srcType), .out(tempI)); 
	
	// creating mux with ALUsrc for second ALU input 
	mux2_1_64 src (.d0(Db), .d1(tempI), .select(ALUsrc), .out(tempALU)); 
	
	// creating alu that computes add, sub, bypass
	alu compute (.A(Da), .B(tempALU), .cntrl(ALUop), .result, .negative, .zero, .overflow, .carry_out); 
	
	// creating data memory for load and store 
	datamem memory (.address(result), .write_enable(MemWrite), .read_enable(1'b1), .write_data(Db), .clk, .xfer_size(4'd8), .read_data(Dout)); 
	
	// creating mux to store output from either alu or memory 
	mux2_1_64 MemReg (.d0(result), .d1(Dout), .select(MemToReg), .out(tempMem)); 
	
	// creating multiplier for MUL
	mult x (.A(Da), .B(Db), .doSigned(1'b1), .mult_low, .mult_high); 
	
	// creating a shifter for LSL and LSR
	shifter sh (.value(Da), .direction, .distance(shamt), .result(shifted));
	
	// created a mux to select between shifted value or multiplied value 
	mux2_1_64 mult_shift (.d0(mult_low), .d1(shifted), .select(shift), .out(tempMath));
	
	// creating the last mux to write back the data from either the ALU or the math.sv to the regfile
	mux2_1_64 lastmux (.d0(tempMem), .d1(tempMath), .select(math), .out(Dw)); 
endmodule 